/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ChangeStatus,
  HTTPValidationError,
  Student,
  StudentCreate,
  StudentFilter,
  StudentList,
  StudentUpdate,
} from '../models/index';
import {
    ChangeStatusFromJSON,
    ChangeStatusToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    StudentFromJSON,
    StudentToJSON,
    StudentCreateFromJSON,
    StudentCreateToJSON,
    StudentFilterFromJSON,
    StudentFilterToJSON,
    StudentListFromJSON,
    StudentListToJSON,
    StudentUpdateFromJSON,
    StudentUpdateToJSON,
} from '../models/index';

export interface ChangeStatusStudentsChangeStatusPatchRequest {
    changeStatus: ChangeStatus;
}

export interface CreateStudentStudentsPostRequest {
    studentCreate: StudentCreate;
}

export interface DeleteStudentStudentsStudentIdDeleteRequest {
    studentId: number;
}

export interface ExportStudentsExportPostRequest {
    studentFilter: StudentFilter;
}

export interface GetStudentsStudentsFilterPostRequest {
    studentFilter: StudentFilter;
}

export interface ImportStudentsStudentsImportPostRequest {
    file: Blob;
}

export interface ReadStudentStudentsStudentIdGetRequest {
    studentId: number;
}

export interface UpdateStudentStudentsStudentIdPutRequest {
    studentId: number;
    studentUpdate: StudentUpdate;
}

/**
 * 
 */
export class StudentsApi extends runtime.BaseAPI {

    /**
     * Change Status
     */
    async changeStatusStudentsChangeStatusPatchRaw(requestParameters: ChangeStatusStudentsChangeStatusPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['changeStatus'] == null) {
            throw new runtime.RequiredError(
                'changeStatus',
                'Required parameter "changeStatus" was null or undefined when calling changeStatusStudentsChangeStatusPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/students/changeStatus`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeStatusToJSON(requestParameters['changeStatus']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Change Status
     */
    async changeStatusStudentsChangeStatusPatch(requestParameters: ChangeStatusStudentsChangeStatusPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.changeStatusStudentsChangeStatusPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create Student
     */
    async createStudentStudentsPostRaw(requestParameters: CreateStudentStudentsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Student>> {
        if (requestParameters['studentCreate'] == null) {
            throw new runtime.RequiredError(
                'studentCreate',
                'Required parameter "studentCreate" was null or undefined when calling createStudentStudentsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/students/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StudentCreateToJSON(requestParameters['studentCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StudentFromJSON(jsonValue));
    }

    /**
     * Create Student
     */
    async createStudentStudentsPost(requestParameters: CreateStudentStudentsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Student> {
        const response = await this.createStudentStudentsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete Student
     */
    async deleteStudentStudentsStudentIdDeleteRaw(requestParameters: DeleteStudentStudentsStudentIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Student>> {
        if (requestParameters['studentId'] == null) {
            throw new runtime.RequiredError(
                'studentId',
                'Required parameter "studentId" was null or undefined when calling deleteStudentStudentsStudentIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/students/{student_id}`.replace(`{${"student_id"}}`, encodeURIComponent(String(requestParameters['studentId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StudentFromJSON(jsonValue));
    }

    /**
     * Delete Student
     */
    async deleteStudentStudentsStudentIdDelete(requestParameters: DeleteStudentStudentsStudentIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Student> {
        const response = await this.deleteStudentStudentsStudentIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Export
     */
    async exportStudentsExportPostRaw(requestParameters: ExportStudentsExportPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['studentFilter'] == null) {
            throw new runtime.RequiredError(
                'studentFilter',
                'Required parameter "studentFilter" was null or undefined when calling exportStudentsExportPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/students/export`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StudentFilterToJSON(requestParameters['studentFilter']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Export
     */
    async exportStudentsExportPost(requestParameters: ExportStudentsExportPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.exportStudentsExportPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Students
     */
    async getStudentsStudentsFilterPostRaw(requestParameters: GetStudentsStudentsFilterPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StudentList>> {
        if (requestParameters['studentFilter'] == null) {
            throw new runtime.RequiredError(
                'studentFilter',
                'Required parameter "studentFilter" was null or undefined when calling getStudentsStudentsFilterPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/students/filter`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StudentFilterToJSON(requestParameters['studentFilter']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StudentListFromJSON(jsonValue));
    }

    /**
     * Get Students
     */
    async getStudentsStudentsFilterPost(requestParameters: GetStudentsStudentsFilterPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StudentList> {
        const response = await this.getStudentsStudentsFilterPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Import Students
     */
    async importStudentsStudentsImportPostRaw(requestParameters: ImportStudentsStudentsImportPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['file'] == null) {
            throw new runtime.RequiredError(
                'file',
                'Required parameter "file" was null or undefined when calling importStudentsStudentsImportPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['file'] != null) {
            formParams.append('file', requestParameters['file'] as any);
        }

        const response = await this.request({
            path: `/students/import`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Import Students
     */
    async importStudentsStudentsImportPost(requestParameters: ImportStudentsStudentsImportPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.importStudentsStudentsImportPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Read Student
     */
    async readStudentStudentsStudentIdGetRaw(requestParameters: ReadStudentStudentsStudentIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Student>> {
        if (requestParameters['studentId'] == null) {
            throw new runtime.RequiredError(
                'studentId',
                'Required parameter "studentId" was null or undefined when calling readStudentStudentsStudentIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/students/{student_id}`.replace(`{${"student_id"}}`, encodeURIComponent(String(requestParameters['studentId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StudentFromJSON(jsonValue));
    }

    /**
     * Read Student
     */
    async readStudentStudentsStudentIdGet(requestParameters: ReadStudentStudentsStudentIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Student> {
        const response = await this.readStudentStudentsStudentIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update Student
     */
    async updateStudentStudentsStudentIdPutRaw(requestParameters: UpdateStudentStudentsStudentIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Student>> {
        if (requestParameters['studentId'] == null) {
            throw new runtime.RequiredError(
                'studentId',
                'Required parameter "studentId" was null or undefined when calling updateStudentStudentsStudentIdPut().'
            );
        }

        if (requestParameters['studentUpdate'] == null) {
            throw new runtime.RequiredError(
                'studentUpdate',
                'Required parameter "studentUpdate" was null or undefined when calling updateStudentStudentsStudentIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/students/{student_id}`.replace(`{${"student_id"}}`, encodeURIComponent(String(requestParameters['studentId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: StudentUpdateToJSON(requestParameters['studentUpdate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StudentFromJSON(jsonValue));
    }

    /**
     * Update Student
     */
    async updateStudentStudentsStudentIdPut(requestParameters: UpdateStudentStudentsStudentIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Student> {
        const response = await this.updateStudentStudentsStudentIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
