/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface By
 */
export interface By {
}
/**
 * 
 * @export
 * @interface ChangeStatus
 */
export interface ChangeStatus {
    /**
     * 
     * @type {number}
     * @memberof ChangeStatus
     */
    'studentId': number;
    /**
     * 
     * @type {boolean}
     * @memberof ChangeStatus
     */
    'status': boolean;
}
/**
 * 
 * @export
 * @interface Direction
 */
export interface Direction {
}
/**
 * 
 * @export
 * @interface Group
 */
export interface Group {
    /**
     * 
     * @type {string}
     * @memberof Group
     */
    'groupNumber': string;
    /**
     * 
     * @type {number}
     * @memberof Group
     */
    'courseNumber': number;
    /**
     * 
     * @type {number}
     * @memberof Group
     */
    'id': number;
}
/**
 * 
 * @export
 * @interface GroupCreate
 */
export interface GroupCreate {
    /**
     * 
     * @type {string}
     * @memberof GroupCreate
     */
    'groupNumber': string;
    /**
     * 
     * @type {number}
     * @memberof GroupCreate
     */
    'courseNumber': number;
}
/**
 * 
 * @export
 * @interface GroupUpdate
 */
export interface GroupUpdate {
    /**
     * 
     * @type {string}
     * @memberof GroupUpdate
     */
    'groupNumber': string;
    /**
     * 
     * @type {number}
     * @memberof GroupUpdate
     */
    'courseNumber': number;
}
/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    'detail'?: Array<ValidationError>;
}
/**
 * 
 * @export
 * @interface Student
 */
export interface Student {
    /**
     * 
     * @type {string}
     * @memberof Student
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof Student
     */
    'groupId': number;
    /**
     * 
     * @type {boolean}
     * @memberof Student
     */
    'status': boolean;
    /**
     * 
     * @type {number}
     * @memberof Student
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof Student
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof Student
     */
    'updatedAt': string;
}
/**
 * 
 * @export
 * @interface StudentCreate
 */
export interface StudentCreate {
    /**
     * 
     * @type {string}
     * @memberof StudentCreate
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof StudentCreate
     */
    'groupId': number;
    /**
     * 
     * @type {boolean}
     * @memberof StudentCreate
     */
    'status': boolean;
}
/**
 * 
 * @export
 * @interface StudentFilter
 */
export interface StudentFilter {
    /**
     * 
     * @type {number}
     * @memberof StudentFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {number}
     * @memberof StudentFilter
     */
    'take'?: number;
    /**
     * 
     * @type {string}
     * @memberof StudentFilter
     */
    'name'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof StudentFilter
     */
    'groupId'?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof StudentFilter
     */
    'status'?: boolean | null;
    /**
     * 
     * @type {StudentFilterOrder}
     * @memberof StudentFilter
     */
    'order'?: StudentFilterOrder | null;
}
/**
 * 
 * @export
 * @interface StudentFilterOrder
 */
export interface StudentFilterOrder {
    /**
     * 
     * @type {By}
     * @memberof StudentFilterOrder
     */
    'by': By;
    /**
     * 
     * @type {Direction}
     * @memberof StudentFilterOrder
     */
    'direction': Direction;
}
/**
 * 
 * @export
 * @interface StudentList
 */
export interface StudentList {
    /**
     * 
     * @type {Array<StudentWithGroup>}
     * @memberof StudentList
     */
    'students': Array<StudentWithGroup>;
    /**
     * 
     * @type {number}
     * @memberof StudentList
     */
    'count': number;
    /**
     * 
     * @type {number}
     * @memberof StudentList
     */
    'skip': number;
    /**
     * 
     * @type {number}
     * @memberof StudentList
     */
    'take': number;
}
/**
 * 
 * @export
 * @interface StudentUpdate
 */
export interface StudentUpdate {
    /**
     * 
     * @type {string}
     * @memberof StudentUpdate
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof StudentUpdate
     */
    'groupId': number;
    /**
     * 
     * @type {boolean}
     * @memberof StudentUpdate
     */
    'status': boolean;
}
/**
 * 
 * @export
 * @interface StudentWithGroup
 */
export interface StudentWithGroup {
    /**
     * 
     * @type {string}
     * @memberof StudentWithGroup
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof StudentWithGroup
     */
    'groupId': number;
    /**
     * 
     * @type {boolean}
     * @memberof StudentWithGroup
     */
    'status': boolean;
    /**
     * 
     * @type {number}
     * @memberof StudentWithGroup
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof StudentWithGroup
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof StudentWithGroup
     */
    'updatedAt': string;
    /**
     * 
     * @type {Group}
     * @memberof StudentWithGroup
     */
    'group': Group;
}
/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<ValidationErrorLocInner>}
     * @memberof ValidationError
     */
    'loc': Array<ValidationErrorLocInner>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'type': string;
}
/**
 * 
 * @export
 * @interface ValidationErrorLocInner
 */
export interface ValidationErrorLocInner {
}

/**
 * GroupsApi - axios parameter creator
 * @export
 */
export const GroupsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Group
         * @param {GroupCreate} groupCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGroupGroupsPost: async (groupCreate: GroupCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupCreate' is not null or undefined
            assertParamExists('createGroupGroupsPost', 'groupCreate', groupCreate)
            const localVarPath = `/groups/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(groupCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Group
         * @param {number} groupId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGroupGroupsGroupIdDelete: async (groupId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('deleteGroupGroupsGroupIdDelete', 'groupId', groupId)
            const localVarPath = `/groups/{group_id}`
                .replace(`{${"group_id"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Groups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroupsGroupsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/groups/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Read Group
         * @param {number} groupId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readGroupGroupsGroupIdGet: async (groupId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('readGroupGroupsGroupIdGet', 'groupId', groupId)
            const localVarPath = `/groups/{group_id}`
                .replace(`{${"group_id"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Group
         * @param {number} groupId 
         * @param {GroupUpdate} groupUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGroupGroupsGroupIdPut: async (groupId: number, groupUpdate: GroupUpdate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('updateGroupGroupsGroupIdPut', 'groupId', groupId)
            // verify required parameter 'groupUpdate' is not null or undefined
            assertParamExists('updateGroupGroupsGroupIdPut', 'groupUpdate', groupUpdate)
            const localVarPath = `/groups/{group_id}`
                .replace(`{${"group_id"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(groupUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GroupsApi - functional programming interface
 * @export
 */
export const GroupsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GroupsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create Group
         * @param {GroupCreate} groupCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createGroupGroupsPost(groupCreate: GroupCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Group>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createGroupGroupsPost(groupCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GroupsApi.createGroupGroupsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete Group
         * @param {number} groupId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteGroupGroupsGroupIdDelete(groupId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Group>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteGroupGroupsGroupIdDelete(groupId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GroupsApi.deleteGroupGroupsGroupIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Groups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGroupsGroupsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Group>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGroupsGroupsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GroupsApi.getGroupsGroupsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Read Group
         * @param {number} groupId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readGroupGroupsGroupIdGet(groupId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Group>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readGroupGroupsGroupIdGet(groupId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GroupsApi.readGroupGroupsGroupIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update Group
         * @param {number} groupId 
         * @param {GroupUpdate} groupUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateGroupGroupsGroupIdPut(groupId: number, groupUpdate: GroupUpdate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Group>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateGroupGroupsGroupIdPut(groupId, groupUpdate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GroupsApi.updateGroupGroupsGroupIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * GroupsApi - factory interface
 * @export
 */
export const GroupsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GroupsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create Group
         * @param {GroupCreate} groupCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGroupGroupsPost(groupCreate: GroupCreate, options?: any): AxiosPromise<Group> {
            return localVarFp.createGroupGroupsPost(groupCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Group
         * @param {number} groupId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGroupGroupsGroupIdDelete(groupId: number, options?: any): AxiosPromise<Group> {
            return localVarFp.deleteGroupGroupsGroupIdDelete(groupId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Groups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroupsGroupsGet(options?: any): AxiosPromise<Array<Group>> {
            return localVarFp.getGroupsGroupsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Read Group
         * @param {number} groupId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readGroupGroupsGroupIdGet(groupId: number, options?: any): AxiosPromise<Group> {
            return localVarFp.readGroupGroupsGroupIdGet(groupId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Group
         * @param {number} groupId 
         * @param {GroupUpdate} groupUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGroupGroupsGroupIdPut(groupId: number, groupUpdate: GroupUpdate, options?: any): AxiosPromise<Group> {
            return localVarFp.updateGroupGroupsGroupIdPut(groupId, groupUpdate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GroupsApi - object-oriented interface
 * @export
 * @class GroupsApi
 * @extends {BaseAPI}
 */
export class GroupsApi extends BaseAPI {
    /**
     * 
     * @summary Create Group
     * @param {GroupCreate} groupCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public createGroupGroupsPost(groupCreate: GroupCreate, options?: RawAxiosRequestConfig) {
        return GroupsApiFp(this.configuration).createGroupGroupsPost(groupCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Group
     * @param {number} groupId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public deleteGroupGroupsGroupIdDelete(groupId: number, options?: RawAxiosRequestConfig) {
        return GroupsApiFp(this.configuration).deleteGroupGroupsGroupIdDelete(groupId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Groups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public getGroupsGroupsGet(options?: RawAxiosRequestConfig) {
        return GroupsApiFp(this.configuration).getGroupsGroupsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Read Group
     * @param {number} groupId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public readGroupGroupsGroupIdGet(groupId: number, options?: RawAxiosRequestConfig) {
        return GroupsApiFp(this.configuration).readGroupGroupsGroupIdGet(groupId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Group
     * @param {number} groupId 
     * @param {GroupUpdate} groupUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public updateGroupGroupsGroupIdPut(groupId: number, groupUpdate: GroupUpdate, options?: RawAxiosRequestConfig) {
        return GroupsApiFp(this.configuration).updateGroupGroupsGroupIdPut(groupId, groupUpdate, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * StudentsApi - axios parameter creator
 * @export
 */
export const StudentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Change Status
         * @param {ChangeStatus} changeStatus 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeStatusStudentsChangeStatusPatch: async (changeStatus: ChangeStatus, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'changeStatus' is not null or undefined
            assertParamExists('changeStatusStudentsChangeStatusPatch', 'changeStatus', changeStatus)
            const localVarPath = `/students/changeStatus`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(changeStatus, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Student
         * @param {StudentCreate} studentCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createStudentStudentsPost: async (studentCreate: StudentCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'studentCreate' is not null or undefined
            assertParamExists('createStudentStudentsPost', 'studentCreate', studentCreate)
            const localVarPath = `/students/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(studentCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Student
         * @param {number} studentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStudentStudentsStudentIdDelete: async (studentId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'studentId' is not null or undefined
            assertParamExists('deleteStudentStudentsStudentIdDelete', 'studentId', studentId)
            const localVarPath = `/students/{student_id}`
                .replace(`{${"student_id"}}`, encodeURIComponent(String(studentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Export
         * @param {StudentFilter} studentFilter 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportStudentsExportPost: async (studentFilter: StudentFilter, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'studentFilter' is not null or undefined
            assertParamExists('exportStudentsExportPost', 'studentFilter', studentFilter)
            const localVarPath = `/students/export`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(studentFilter, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Students
         * @param {StudentFilter} studentFilter 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudentsStudentsFilterPost: async (studentFilter: StudentFilter, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'studentFilter' is not null or undefined
            assertParamExists('getStudentsStudentsFilterPost', 'studentFilter', studentFilter)
            const localVarPath = `/students/filter`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(studentFilter, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Import Students
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importStudentsStudentsImportPost: async (file: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'file' is not null or undefined
            assertParamExists('importStudentsStudentsImportPost', 'file', file)
            const localVarPath = `/students/import`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Read Student
         * @param {number} studentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readStudentStudentsStudentIdGet: async (studentId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'studentId' is not null or undefined
            assertParamExists('readStudentStudentsStudentIdGet', 'studentId', studentId)
            const localVarPath = `/students/{student_id}`
                .replace(`{${"student_id"}}`, encodeURIComponent(String(studentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Student
         * @param {number} studentId 
         * @param {StudentUpdate} studentUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateStudentStudentsStudentIdPut: async (studentId: number, studentUpdate: StudentUpdate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'studentId' is not null or undefined
            assertParamExists('updateStudentStudentsStudentIdPut', 'studentId', studentId)
            // verify required parameter 'studentUpdate' is not null or undefined
            assertParamExists('updateStudentStudentsStudentIdPut', 'studentUpdate', studentUpdate)
            const localVarPath = `/students/{student_id}`
                .replace(`{${"student_id"}}`, encodeURIComponent(String(studentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(studentUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StudentsApi - functional programming interface
 * @export
 */
export const StudentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StudentsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Change Status
         * @param {ChangeStatus} changeStatus 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changeStatusStudentsChangeStatusPatch(changeStatus: ChangeStatus, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.changeStatusStudentsChangeStatusPatch(changeStatus, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StudentsApi.changeStatusStudentsChangeStatusPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create Student
         * @param {StudentCreate} studentCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createStudentStudentsPost(studentCreate: StudentCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Student>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createStudentStudentsPost(studentCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StudentsApi.createStudentStudentsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete Student
         * @param {number} studentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteStudentStudentsStudentIdDelete(studentId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Student>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteStudentStudentsStudentIdDelete(studentId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StudentsApi.deleteStudentStudentsStudentIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Export
         * @param {StudentFilter} studentFilter 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exportStudentsExportPost(studentFilter: StudentFilter, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.exportStudentsExportPost(studentFilter, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StudentsApi.exportStudentsExportPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Students
         * @param {StudentFilter} studentFilter 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStudentsStudentsFilterPost(studentFilter: StudentFilter, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudentList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStudentsStudentsFilterPost(studentFilter, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StudentsApi.getStudentsStudentsFilterPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Import Students
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async importStudentsStudentsImportPost(file: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.importStudentsStudentsImportPost(file, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StudentsApi.importStudentsStudentsImportPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Read Student
         * @param {number} studentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readStudentStudentsStudentIdGet(studentId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Student>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readStudentStudentsStudentIdGet(studentId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StudentsApi.readStudentStudentsStudentIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update Student
         * @param {number} studentId 
         * @param {StudentUpdate} studentUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateStudentStudentsStudentIdPut(studentId: number, studentUpdate: StudentUpdate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Student>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateStudentStudentsStudentIdPut(studentId, studentUpdate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StudentsApi.updateStudentStudentsStudentIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * StudentsApi - factory interface
 * @export
 */
export const StudentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StudentsApiFp(configuration)
    return {
        /**
         * 
         * @summary Change Status
         * @param {ChangeStatus} changeStatus 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeStatusStudentsChangeStatusPatch(changeStatus: ChangeStatus, options?: any): AxiosPromise<any> {
            return localVarFp.changeStatusStudentsChangeStatusPatch(changeStatus, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Student
         * @param {StudentCreate} studentCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createStudentStudentsPost(studentCreate: StudentCreate, options?: any): AxiosPromise<Student> {
            return localVarFp.createStudentStudentsPost(studentCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Student
         * @param {number} studentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStudentStudentsStudentIdDelete(studentId: number, options?: any): AxiosPromise<Student> {
            return localVarFp.deleteStudentStudentsStudentIdDelete(studentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Export
         * @param {StudentFilter} studentFilter 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportStudentsExportPost(studentFilter: StudentFilter, options?: any): AxiosPromise<any> {
            return localVarFp.exportStudentsExportPost(studentFilter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Students
         * @param {StudentFilter} studentFilter 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudentsStudentsFilterPost(studentFilter: StudentFilter, options?: any): AxiosPromise<StudentList> {
            return localVarFp.getStudentsStudentsFilterPost(studentFilter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Import Students
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importStudentsStudentsImportPost(file: File, options?: any): AxiosPromise<any> {
            return localVarFp.importStudentsStudentsImportPost(file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Read Student
         * @param {number} studentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readStudentStudentsStudentIdGet(studentId: number, options?: any): AxiosPromise<Student> {
            return localVarFp.readStudentStudentsStudentIdGet(studentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Student
         * @param {number} studentId 
         * @param {StudentUpdate} studentUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateStudentStudentsStudentIdPut(studentId: number, studentUpdate: StudentUpdate, options?: any): AxiosPromise<Student> {
            return localVarFp.updateStudentStudentsStudentIdPut(studentId, studentUpdate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StudentsApi - object-oriented interface
 * @export
 * @class StudentsApi
 * @extends {BaseAPI}
 */
export class StudentsApi extends BaseAPI {
    /**
     * 
     * @summary Change Status
     * @param {ChangeStatus} changeStatus 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentsApi
     */
    public changeStatusStudentsChangeStatusPatch(changeStatus: ChangeStatus, options?: RawAxiosRequestConfig) {
        return StudentsApiFp(this.configuration).changeStatusStudentsChangeStatusPatch(changeStatus, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Student
     * @param {StudentCreate} studentCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentsApi
     */
    public createStudentStudentsPost(studentCreate: StudentCreate, options?: RawAxiosRequestConfig) {
        return StudentsApiFp(this.configuration).createStudentStudentsPost(studentCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Student
     * @param {number} studentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentsApi
     */
    public deleteStudentStudentsStudentIdDelete(studentId: number, options?: RawAxiosRequestConfig) {
        return StudentsApiFp(this.configuration).deleteStudentStudentsStudentIdDelete(studentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Export
     * @param {StudentFilter} studentFilter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentsApi
     */
    public exportStudentsExportPost(studentFilter: StudentFilter, options?: RawAxiosRequestConfig) {
        return StudentsApiFp(this.configuration).exportStudentsExportPost(studentFilter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Students
     * @param {StudentFilter} studentFilter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentsApi
     */
    public getStudentsStudentsFilterPost(studentFilter: StudentFilter, options?: RawAxiosRequestConfig) {
        return StudentsApiFp(this.configuration).getStudentsStudentsFilterPost(studentFilter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Import Students
     * @param {File} file 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentsApi
     */
    public importStudentsStudentsImportPost(file: File, options?: RawAxiosRequestConfig) {
        return StudentsApiFp(this.configuration).importStudentsStudentsImportPost(file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Read Student
     * @param {number} studentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentsApi
     */
    public readStudentStudentsStudentIdGet(studentId: number, options?: RawAxiosRequestConfig) {
        return StudentsApiFp(this.configuration).readStudentStudentsStudentIdGet(studentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Student
     * @param {number} studentId 
     * @param {StudentUpdate} studentUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentsApi
     */
    public updateStudentStudentsStudentIdPut(studentId: number, studentUpdate: StudentUpdate, options?: RawAxiosRequestConfig) {
        return StudentsApiFp(this.configuration).updateStudentStudentsStudentIdPut(studentId, studentUpdate, options).then((request) => request(this.axios, this.basePath));
    }
}



